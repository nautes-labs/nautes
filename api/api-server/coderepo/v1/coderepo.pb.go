// Copyright 2023 Nautes Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: coderepo/v1/coderepo.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for listing items
type ListsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// To list the product name of the repository.
	ProductName string `protobuf:"bytes,1,opt,name=product_name,proto3" json:"product_name,omitempty"`
	// Filter the list by field.
	// eg: field_selector=project=project1,pipeline_runtime=true,deployment_runtime=false
	// Field Support:
	// project: fuzzy match
	// pipeline_runtime: exact match
	// deployment_runtime: exact match
	FieldSelector string `protobuf:"bytes,2,opt,name=field_selector,proto3" json:"field_selector,omitempty"`
}

func (x *ListsRequest) Reset() {
	*x = ListsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coderepo_v1_coderepo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListsRequest) ProtoMessage() {}

func (x *ListsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coderepo_v1_coderepo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListsRequest.ProtoReflect.Descriptor instead.
func (*ListsRequest) Descriptor() ([]byte, []int) {
	return file_coderepo_v1_coderepo_proto_rawDescGZIP(), []int{0}
}

func (x *ListsRequest) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ListsRequest) GetFieldSelector() string {
	if x != nil {
		return x.FieldSelector
	}
	return ""
}

// Message representing a webhook
type Webhook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The events that the webhook should trigger on
	Events []string `protobuf:"bytes,1,rep,name=Events,json=events,proto3" json:"Events,omitempty"`
}

func (x *Webhook) Reset() {
	*x = Webhook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coderepo_v1_coderepo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Webhook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Webhook) ProtoMessage() {}

func (x *Webhook) ProtoReflect() protoreflect.Message {
	mi := &file_coderepo_v1_coderepo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Webhook.ProtoReflect.Descriptor instead.
func (*Webhook) Descriptor() ([]byte, []int) {
	return file_coderepo_v1_coderepo_proto_rawDescGZIP(), []int{1}
}

func (x *Webhook) GetEvents() []string {
	if x != nil {
		return x.Events
	}
	return nil
}

// Message representing a GitLab repository
type Gitlab struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the repository
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The path of the repository
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// The visibility of the repository
	Visibility string `protobuf:"bytes,3,opt,name=visibility,proto3" json:"visibility,omitempty"`
	// The description of the repository
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Gitlab) Reset() {
	*x = Gitlab{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coderepo_v1_coderepo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gitlab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gitlab) ProtoMessage() {}

func (x *Gitlab) ProtoReflect() protoreflect.Message {
	mi := &file_coderepo_v1_coderepo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gitlab.ProtoReflect.Descriptor instead.
func (*Gitlab) Descriptor() ([]byte, []int) {
	return file_coderepo_v1_coderepo_proto_rawDescGZIP(), []int{2}
}

func (x *Gitlab) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Gitlab) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Gitlab) GetVisibility() string {
	if x != nil {
		return x.Visibility
	}
	return ""
}

func (x *Gitlab) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Message representing a GitHub repository
type Github struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the repository
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The path of the repository
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// The visibility of the repository
	Visibility string `protobuf:"bytes,3,opt,name=visibility,proto3" json:"visibility,omitempty"`
	// The description of the repository
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Github) Reset() {
	*x = Github{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coderepo_v1_coderepo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Github) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Github) ProtoMessage() {}

func (x *Github) ProtoReflect() protoreflect.Message {
	mi := &file_coderepo_v1_coderepo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Github.ProtoReflect.Descriptor instead.
func (*Github) Descriptor() ([]byte, []int) {
	return file_coderepo_v1_coderepo_proto_rawDescGZIP(), []int{3}
}

func (x *Github) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Github) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Github) GetVisibility() string {
	if x != nil {
		return x.Visibility
	}
	return ""
}

func (x *Github) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Message representing a GitLab project
type GitlabProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the project
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The path of the project
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// The visibility of the project
	Visibility string `protobuf:"bytes,3,opt,name=visibility,proto3" json:"visibility,omitempty"`
	// The description of the project
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The SSH URL of the repository
	SshUrlToRepo string `protobuf:"bytes,5,opt,name=ssh_url_to_repo,proto3" json:"ssh_url_to_repo,omitempty"`
	// The HTTP URL of the repository
	HttpUrlToRepo string `protobuf:"bytes,6,opt,name=http_url_to_repo,proto3" json:"http_url_to_repo,omitempty"`
}

func (x *GitlabProject) Reset() {
	*x = GitlabProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coderepo_v1_coderepo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitlabProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabProject) ProtoMessage() {}

func (x *GitlabProject) ProtoReflect() protoreflect.Message {
	mi := &file_coderepo_v1_coderepo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabProject.ProtoReflect.Descriptor instead.
func (*GitlabProject) Descriptor() ([]byte, []int) {
	return file_coderepo_v1_coderepo_proto_rawDescGZIP(), []int{4}
}

func (x *GitlabProject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GitlabProject) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GitlabProject) GetVisibility() string {
	if x != nil {
		return x.Visibility
	}
	return ""
}

func (x *GitlabProject) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GitlabProject) GetSshUrlToRepo() string {
	if x != nil {
		return x.SshUrlToRepo
	}
	return ""
}

func (x *GitlabProject) GetHttpUrlToRepo() string {
	if x != nil {
		return x.HttpUrlToRepo
	}
	return ""
}

// Message representing a GitHub project
type GithubProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the project
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The path of the project
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// The visibility of the project
	Visibility string `protobuf:"bytes,3,opt,name=visibility,proto3" json:"visibility,omitempty"`
	// The description of the project
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The SSH URL of the repository
	SshUrlToRepo string `protobuf:"bytes,5,opt,name=ssh_url_to_repo,proto3" json:"ssh_url_to_repo,omitempty"`
	// The HTTP URL of the repository
	HttpUrlToRepo string `protobuf:"bytes,6,opt,name=http_url_to_repo,proto3" json:"http_url_to_repo,omitempty"`
}

func (x *GithubProject) Reset() {
	*x = GithubProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coderepo_v1_coderepo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GithubProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubProject) ProtoMessage() {}

func (x *GithubProject) ProtoReflect() protoreflect.Message {
	mi := &file_coderepo_v1_coderepo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubProject.ProtoReflect.Descriptor instead.
func (*GithubProject) Descriptor() ([]byte, []int) {
	return file_coderepo_v1_coderepo_proto_rawDescGZIP(), []int{5}
}

func (x *GithubProject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GithubProject) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GithubProject) GetVisibility() string {
	if x != nil {
		return x.Visibility
	}
	return ""
}

func (x *GithubProject) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GithubProject) GetSshUrlToRepo() string {
	if x != nil {
		return x.SshUrlToRepo
	}
	return ""
}

func (x *GithubProject) GetHttpUrlToRepo() string {
	if x != nil {
		return x.HttpUrlToRepo
	}
	return ""
}

// Define the GitProject message, which includes the GitlabProject and GithubProject fields.
type GitProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gitlab *GitlabProject `protobuf:"bytes,1,opt,name=gitlab,proto3" json:"gitlab,omitempty"` // The GitlabProject field.
	Github *GithubProject `protobuf:"bytes,2,opt,name=github,proto3" json:"github,omitempty"` // The GithubProject field.
}

func (x *GitProject) Reset() {
	*x = GitProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coderepo_v1_coderepo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitProject) ProtoMessage() {}

func (x *GitProject) ProtoReflect() protoreflect.Message {
	mi := &file_coderepo_v1_coderepo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitProject.ProtoReflect.Descriptor instead.
func (*GitProject) Descriptor() ([]byte, []int) {
	return file_coderepo_v1_coderepo_proto_rawDescGZIP(), []int{6}
}

func (x *GitProject) GetGitlab() *GitlabProject {
	if x != nil {
		return x.Gitlab
	}
	return nil
}

func (x *GitProject) GetGithub() *GithubProject {
	if x != nil {
		return x.Github
	}
	return nil
}

// Define the Git message, which includes the Gitlab and Github fields.
type Git struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gitlab *Gitlab `protobuf:"bytes,1,opt,name=gitlab,proto3" json:"gitlab,omitempty"` // The Gitlab field.
	Github *Github `protobuf:"bytes,2,opt,name=github,proto3" json:"github,omitempty"` // The Github field.
}

func (x *Git) Reset() {
	*x = Git{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coderepo_v1_coderepo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Git) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Git) ProtoMessage() {}

func (x *Git) ProtoReflect() protoreflect.Message {
	mi := &file_coderepo_v1_coderepo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Git.ProtoReflect.Descriptor instead.
func (*Git) Descriptor() ([]byte, []int) {
	return file_coderepo_v1_coderepo_proto_rawDescGZIP(), []int{7}
}

func (x *Git) GetGitlab() *Gitlab {
	if x != nil {
		return x.Gitlab
	}
	return nil
}

func (x *Git) GetGithub() *Github {
	if x != nil {
		return x.Github
	}
	return nil
}

// Define the GetRequest message, which includes the product_name and coderepoName fields.
type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductName  string `protobuf:"bytes,1,opt,name=product_name,proto3" json:"product_name,omitempty"`                    // The product_name field.
	CoderepoName string `protobuf:"bytes,2,opt,name=coderepoName,json=coderepo_name,proto3" json:"coderepoName,omitempty"` // The coderepoName field.
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coderepo_v1_coderepo_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coderepo_v1_coderepo_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_coderepo_v1_coderepo_proto_rawDescGZIP(), []int{8}
}

func (x *GetRequest) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *GetRequest) GetCoderepoName() string {
	if x != nil {
		return x.CoderepoName
	}
	return ""
}

// Define the GetReply message, which includes the product, name, project, webhook, DeploymentRuntime, PipelineRuntime, and GitProject fields.
type GetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product           string      `protobuf:"bytes,1,opt,name=product,proto3" json:"product,omitempty"`
	Name              string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Project           string      `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	Webhook           *Webhook    `protobuf:"bytes,4,opt,name=webhook,proto3" json:"webhook,omitempty"`
	DeploymentRuntime bool        `protobuf:"varint,5,opt,name=DeploymentRuntime,json=deployment_runtime,proto3" json:"DeploymentRuntime,omitempty"`
	PipelineRuntime   bool        `protobuf:"varint,6,opt,name=PipelineRuntime,json=pipeline_runtime,proto3" json:"PipelineRuntime,omitempty"`
	Git               *GitProject `protobuf:"bytes,7,opt,name=git,proto3" json:"git,omitempty"`
}

func (x *GetReply) Reset() {
	*x = GetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coderepo_v1_coderepo_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReply) ProtoMessage() {}

func (x *GetReply) ProtoReflect() protoreflect.Message {
	mi := &file_coderepo_v1_coderepo_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReply.ProtoReflect.Descriptor instead.
func (*GetReply) Descriptor() ([]byte, []int) {
	return file_coderepo_v1_coderepo_proto_rawDescGZIP(), []int{9}
}

func (x *GetReply) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *GetReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetReply) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GetReply) GetWebhook() *Webhook {
	if x != nil {
		return x.Webhook
	}
	return nil
}

func (x *GetReply) GetDeploymentRuntime() bool {
	if x != nil {
		return x.DeploymentRuntime
	}
	return false
}

func (x *GetReply) GetPipelineRuntime() bool {
	if x != nil {
		return x.PipelineRuntime
	}
	return false
}

func (x *GetReply) GetGit() *GitProject {
	if x != nil {
		return x.Git
	}
	return nil
}

// Define the ListsReply message, which includes the repeated items field.
type ListsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*GetReply `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListsReply) Reset() {
	*x = ListsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coderepo_v1_coderepo_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListsReply) ProtoMessage() {}

func (x *ListsReply) ProtoReflect() protoreflect.Message {
	mi := &file_coderepo_v1_coderepo_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListsReply.ProtoReflect.Descriptor instead.
func (*ListsReply) Descriptor() ([]byte, []int) {
	return file_coderepo_v1_coderepo_proto_rawDescGZIP(), []int{10}
}

func (x *ListsReply) GetItems() []*GetReply {
	if x != nil {
		return x.Items
	}
	return nil
}

// Define the SaveRequest message, which includes the product_name, coderepoName, insecureSkipCheck, and Body fields.
type SaveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductName       string            `protobuf:"bytes,1,opt,name=product_name,proto3" json:"product_name,omitempty"`
	CoderepoName      string            `protobuf:"bytes,2,opt,name=coderepoName,json=coderepo_name,proto3" json:"coderepoName,omitempty"`
	InsecureSkipCheck bool              `protobuf:"varint,3,opt,name=insecureSkipCheck,json=insecure_skip_check,proto3" json:"insecureSkipCheck,omitempty"`
	Body              *SaveRequest_Body `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SaveRequest) Reset() {
	*x = SaveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coderepo_v1_coderepo_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveRequest) ProtoMessage() {}

func (x *SaveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coderepo_v1_coderepo_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveRequest.ProtoReflect.Descriptor instead.
func (*SaveRequest) Descriptor() ([]byte, []int) {
	return file_coderepo_v1_coderepo_proto_rawDescGZIP(), []int{11}
}

func (x *SaveRequest) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *SaveRequest) GetCoderepoName() string {
	if x != nil {
		return x.CoderepoName
	}
	return ""
}

func (x *SaveRequest) GetInsecureSkipCheck() bool {
	if x != nil {
		return x.InsecureSkipCheck
	}
	return false
}

func (x *SaveRequest) GetBody() *SaveRequest_Body {
	if x != nil {
		return x.Body
	}
	return nil
}

// Define the SaveReply message, which includes the msg field.
type SaveReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Msg is a message confirming the save.
	Msg string `protobuf:"bytes,1,opt,name=msg,json=message,proto3" json:"msg,omitempty"` // The msg field.
}

func (x *SaveReply) Reset() {
	*x = SaveReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coderepo_v1_coderepo_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveReply) ProtoMessage() {}

func (x *SaveReply) ProtoReflect() protoreflect.Message {
	mi := &file_coderepo_v1_coderepo_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveReply.ProtoReflect.Descriptor instead.
func (*SaveReply) Descriptor() ([]byte, []int) {
	return file_coderepo_v1_coderepo_proto_rawDescGZIP(), []int{12}
}

func (x *SaveReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// Represents a request to delete a codeRepo manifest.
type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductName       string `protobuf:"bytes,1,opt,name=product_name,proto3" json:"product_name,omitempty"`
	CoderepoName      string `protobuf:"bytes,2,opt,name=coderepoName,json=coderepo_name,proto3" json:"coderepoName,omitempty"`
	InsecureSkipCheck bool   `protobuf:"varint,3,opt,name=insecureSkipCheck,json=insecure_skip_check,proto3" json:"insecureSkipCheck,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coderepo_v1_coderepo_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coderepo_v1_coderepo_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_coderepo_v1_coderepo_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteRequest) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *DeleteRequest) GetCoderepoName() string {
	if x != nil {
		return x.CoderepoName
	}
	return ""
}

func (x *DeleteRequest) GetInsecureSkipCheck() bool {
	if x != nil {
		return x.InsecureSkipCheck
	}
	return false
}

// Represents a response to a DeleteRequest message.
type DeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,json=message,proto3" json:"msg,omitempty"`
}

func (x *DeleteReply) Reset() {
	*x = DeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coderepo_v1_coderepo_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReply) ProtoMessage() {}

func (x *DeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_coderepo_v1_coderepo_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReply.ProtoReflect.Descriptor instead.
func (*DeleteReply) Descriptor() ([]byte, []int) {
	return file_coderepo_v1_coderepo_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type SaveRequest_Body struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project           string   `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Webhook           *Webhook `protobuf:"bytes,2,opt,name=webhook,proto3" json:"webhook,omitempty"`
	DeploymentRuntime bool     `protobuf:"varint,3,opt,name=DeploymentRuntime,json=deployment_runtime,proto3" json:"DeploymentRuntime,omitempty"`
	PipelineRuntime   bool     `protobuf:"varint,4,opt,name=PipelineRuntime,json=pipeline_runtime,proto3" json:"PipelineRuntime,omitempty"`
	// You must fill in the parameters related to gitlab or github
	Git *Git `protobuf:"bytes,5,opt,name=git,proto3" json:"git,omitempty"`
}

func (x *SaveRequest_Body) Reset() {
	*x = SaveRequest_Body{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coderepo_v1_coderepo_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveRequest_Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveRequest_Body) ProtoMessage() {}

func (x *SaveRequest_Body) ProtoReflect() protoreflect.Message {
	mi := &file_coderepo_v1_coderepo_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveRequest_Body.ProtoReflect.Descriptor instead.
func (*SaveRequest_Body) Descriptor() ([]byte, []int) {
	return file_coderepo_v1_coderepo_proto_rawDescGZIP(), []int{11, 0}
}

func (x *SaveRequest_Body) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SaveRequest_Body) GetWebhook() *Webhook {
	if x != nil {
		return x.Webhook
	}
	return nil
}

func (x *SaveRequest_Body) GetDeploymentRuntime() bool {
	if x != nil {
		return x.DeploymentRuntime
	}
	return false
}

func (x *SaveRequest_Body) GetPipelineRuntime() bool {
	if x != nil {
		return x.PipelineRuntime
	}
	return false
}

func (x *SaveRequest_Body) GetGit() *Git {
	if x != nil {
		return x.Git
	}
	return nil
}

var File_coderepo_v1_coderepo_proto protoreflect.FileDescriptor

var file_coderepo_v1_coderepo_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x70, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x22, 0x21, 0x0a, 0x07, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x06, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xfa, 0x42, 0x13, 0x72,
	0x11, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x9c, 0x01, 0x0a, 0x06, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x12, 0x1b, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xfa, 0x42, 0x13, 0x72, 0x11,
	0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xf9, 0x01, 0x0a, 0x0d, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x0a, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x16, 0xfa, 0x42, 0x13, 0x72, 0x11, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x07,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x73, 0x68, 0x5f, 0x75, 0x72, 0x6c,
	0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x73, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x12,
	0x2a, 0x0a, 0x10, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68, 0x74, 0x74, 0x70, 0x5f,
	0x75, 0x72, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x22, 0xf9, 0x01, 0x0a, 0x0d,
	0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xfa, 0x42, 0x13,
	0x72, 0x11, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x73, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x74, 0x6f, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x73, 0x68, 0x5f,
	0x75, 0x72, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x5f,
	0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x22, 0x7c, 0x0a, 0x0a, 0x47, 0x69, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x12, 0x36, 0x0a,
	0x06, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x22, 0x67, 0x0a, 0x03, 0x47, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x06,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x06, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x12, 0x2f, 0x0a,
	0x06, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x06, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x22, 0x55,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x70, 0x6f,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8f, 0x02, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x2d,
	0x0a, 0x11, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x0f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x67, 0x69, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x03, 0x67, 0x69, 0x74, 0x22, 0x3d, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72,
	0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xa0, 0x03, 0x0a, 0x0b, 0x53, 0x61, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x63, 0x6f,
	0x64, 0x65, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x11, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x35, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0xe0, 0x01, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x2d, 0x0a,
	0x11, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0f,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x67, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72,
	0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x03, 0x67, 0x69, 0x74, 0x22, 0x21, 0x0a, 0x09, 0x53, 0x61, 0x76,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x88, 0x01, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65,
	0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x11, 0x69, 0x6e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x6b, 0x69,
	0x70, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x23, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xba, 0x04, 0x0a,
	0x08, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x87, 0x01, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x12, 0x38, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61,
	0x6d, 0x65, 0x7d, 0x12, 0x7e, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72,
	0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65,
	0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x0c, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72,
	0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x70,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x46,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x38, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x70,
	0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x90, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x2a,
	0x38, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x64, 0x65,
	0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x61, 0x75, 0x74, 0x65, 0x73, 0x2d, 0x6c,
	0x61, 0x62, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x70, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_coderepo_v1_coderepo_proto_rawDescOnce sync.Once
	file_coderepo_v1_coderepo_proto_rawDescData = file_coderepo_v1_coderepo_proto_rawDesc
)

func file_coderepo_v1_coderepo_proto_rawDescGZIP() []byte {
	file_coderepo_v1_coderepo_proto_rawDescOnce.Do(func() {
		file_coderepo_v1_coderepo_proto_rawDescData = protoimpl.X.CompressGZIP(file_coderepo_v1_coderepo_proto_rawDescData)
	})
	return file_coderepo_v1_coderepo_proto_rawDescData
}

var file_coderepo_v1_coderepo_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_coderepo_v1_coderepo_proto_goTypes = []interface{}{
	(*ListsRequest)(nil),     // 0: api.coderepo.v1.ListsRequest
	(*Webhook)(nil),          // 1: api.coderepo.v1.Webhook
	(*Gitlab)(nil),           // 2: api.coderepo.v1.Gitlab
	(*Github)(nil),           // 3: api.coderepo.v1.Github
	(*GitlabProject)(nil),    // 4: api.coderepo.v1.GitlabProject
	(*GithubProject)(nil),    // 5: api.coderepo.v1.GithubProject
	(*GitProject)(nil),       // 6: api.coderepo.v1.GitProject
	(*Git)(nil),              // 7: api.coderepo.v1.Git
	(*GetRequest)(nil),       // 8: api.coderepo.v1.GetRequest
	(*GetReply)(nil),         // 9: api.coderepo.v1.GetReply
	(*ListsReply)(nil),       // 10: api.coderepo.v1.ListsReply
	(*SaveRequest)(nil),      // 11: api.coderepo.v1.SaveRequest
	(*SaveReply)(nil),        // 12: api.coderepo.v1.SaveReply
	(*DeleteRequest)(nil),    // 13: api.coderepo.v1.DeleteRequest
	(*DeleteReply)(nil),      // 14: api.coderepo.v1.DeleteReply
	(*SaveRequest_Body)(nil), // 15: api.coderepo.v1.SaveRequest.Body
}
var file_coderepo_v1_coderepo_proto_depIdxs = []int32{
	4,  // 0: api.coderepo.v1.GitProject.gitlab:type_name -> api.coderepo.v1.GitlabProject
	5,  // 1: api.coderepo.v1.GitProject.github:type_name -> api.coderepo.v1.GithubProject
	2,  // 2: api.coderepo.v1.Git.gitlab:type_name -> api.coderepo.v1.Gitlab
	3,  // 3: api.coderepo.v1.Git.github:type_name -> api.coderepo.v1.Github
	1,  // 4: api.coderepo.v1.GetReply.webhook:type_name -> api.coderepo.v1.Webhook
	6,  // 5: api.coderepo.v1.GetReply.git:type_name -> api.coderepo.v1.GitProject
	9,  // 6: api.coderepo.v1.ListsReply.items:type_name -> api.coderepo.v1.GetReply
	15, // 7: api.coderepo.v1.SaveRequest.body:type_name -> api.coderepo.v1.SaveRequest.Body
	1,  // 8: api.coderepo.v1.SaveRequest.Body.webhook:type_name -> api.coderepo.v1.Webhook
	7,  // 9: api.coderepo.v1.SaveRequest.Body.git:type_name -> api.coderepo.v1.Git
	8,  // 10: api.coderepo.v1.CodeRepo.GetCodeRepo:input_type -> api.coderepo.v1.GetRequest
	0,  // 11: api.coderepo.v1.CodeRepo.ListCodeRepos:input_type -> api.coderepo.v1.ListsRequest
	11, // 12: api.coderepo.v1.CodeRepo.SaveCodeRepo:input_type -> api.coderepo.v1.SaveRequest
	13, // 13: api.coderepo.v1.CodeRepo.DeleteCodeRepo:input_type -> api.coderepo.v1.DeleteRequest
	9,  // 14: api.coderepo.v1.CodeRepo.GetCodeRepo:output_type -> api.coderepo.v1.GetReply
	10, // 15: api.coderepo.v1.CodeRepo.ListCodeRepos:output_type -> api.coderepo.v1.ListsReply
	12, // 16: api.coderepo.v1.CodeRepo.SaveCodeRepo:output_type -> api.coderepo.v1.SaveReply
	14, // 17: api.coderepo.v1.CodeRepo.DeleteCodeRepo:output_type -> api.coderepo.v1.DeleteReply
	14, // [14:18] is the sub-list for method output_type
	10, // [10:14] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_coderepo_v1_coderepo_proto_init() }
func file_coderepo_v1_coderepo_proto_init() {
	if File_coderepo_v1_coderepo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_coderepo_v1_coderepo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coderepo_v1_coderepo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Webhook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coderepo_v1_coderepo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gitlab); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coderepo_v1_coderepo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Github); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coderepo_v1_coderepo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitlabProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coderepo_v1_coderepo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GithubProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coderepo_v1_coderepo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coderepo_v1_coderepo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Git); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coderepo_v1_coderepo_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coderepo_v1_coderepo_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coderepo_v1_coderepo_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coderepo_v1_coderepo_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coderepo_v1_coderepo_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coderepo_v1_coderepo_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coderepo_v1_coderepo_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coderepo_v1_coderepo_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveRequest_Body); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coderepo_v1_coderepo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_coderepo_v1_coderepo_proto_goTypes,
		DependencyIndexes: file_coderepo_v1_coderepo_proto_depIdxs,
		MessageInfos:      file_coderepo_v1_coderepo_proto_msgTypes,
	}.Build()
	File_coderepo_v1_coderepo_proto = out.File
	file_coderepo_v1_coderepo_proto_rawDesc = nil
	file_coderepo_v1_coderepo_proto_goTypes = nil
	file_coderepo_v1_coderepo_proto_depIdxs = nil
}
