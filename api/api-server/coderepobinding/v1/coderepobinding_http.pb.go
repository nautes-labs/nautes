// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v3.12.4
// source: coderepobinding/v1/coderepobinding.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCodeRepoBindingDeleteCodeRepoBinding = "/api.coderepobinding.v1.CodeRepoBinding/DeleteCodeRepoBinding"
const OperationCodeRepoBindingGetCodeRepoBinding = "/api.coderepobinding.v1.CodeRepoBinding/GetCodeRepoBinding"
const OperationCodeRepoBindingListCodeRepoBindings = "/api.coderepobinding.v1.CodeRepoBinding/ListCodeRepoBindings"
const OperationCodeRepoBindingSaveCodeRepoBinding = "/api.coderepobinding.v1.CodeRepoBinding/SaveCodeRepoBinding"

type CodeRepoBindingHTTPServer interface {
	DeleteCodeRepoBinding(context.Context, *DeleteRequest) (*DeleteReply, error)
	GetCodeRepoBinding(context.Context, *GetRequest) (*GetReply, error)
	ListCodeRepoBindings(context.Context, *ListsRequest) (*ListsReply, error)
	SaveCodeRepoBinding(context.Context, *SaveRequest) (*SaveReply, error)
}

func RegisterCodeRepoBindingHTTPServer(s *http.Server, srv CodeRepoBindingHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/products/{product_name}/coderepobindings/{coderepo_binding_name}", _CodeRepoBinding_GetCodeRepoBinding0_HTTP_Handler(srv))
	r.GET("/api/v1/products/{product_name}/coderepobindings", _CodeRepoBinding_ListCodeRepoBindings0_HTTP_Handler(srv))
	r.POST("/api/v1/products/{product_name}/coderepobindings/{coderepo_binding_name}", _CodeRepoBinding_SaveCodeRepoBinding0_HTTP_Handler(srv))
	r.DELETE("/api/v1/products/{product_name}/coderepobindings/{coderepo_binding_name}", _CodeRepoBinding_DeleteCodeRepoBinding0_HTTP_Handler(srv))
}

func _CodeRepoBinding_GetCodeRepoBinding0_HTTP_Handler(srv CodeRepoBindingHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCodeRepoBindingGetCodeRepoBinding)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCodeRepoBinding(ctx, req.(*GetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetReply)
		return ctx.Result(200, reply)
	}
}

func _CodeRepoBinding_ListCodeRepoBindings0_HTTP_Handler(srv CodeRepoBindingHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCodeRepoBindingListCodeRepoBindings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCodeRepoBindings(ctx, req.(*ListsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListsReply)
		return ctx.Result(200, reply)
	}
}

func _CodeRepoBinding_SaveCodeRepoBinding0_HTTP_Handler(srv CodeRepoBindingHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveRequest
		if err := ctx.Bind(&in.Body); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCodeRepoBindingSaveCodeRepoBinding)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveCodeRepoBinding(ctx, req.(*SaveRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaveReply)
		return ctx.Result(200, reply)
	}
}

func _CodeRepoBinding_DeleteCodeRepoBinding0_HTTP_Handler(srv CodeRepoBindingHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCodeRepoBindingDeleteCodeRepoBinding)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCodeRepoBinding(ctx, req.(*DeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteReply)
		return ctx.Result(200, reply)
	}
}

type CodeRepoBindingHTTPClient interface {
	DeleteCodeRepoBinding(ctx context.Context, req *DeleteRequest, opts ...http.CallOption) (rsp *DeleteReply, err error)
	GetCodeRepoBinding(ctx context.Context, req *GetRequest, opts ...http.CallOption) (rsp *GetReply, err error)
	ListCodeRepoBindings(ctx context.Context, req *ListsRequest, opts ...http.CallOption) (rsp *ListsReply, err error)
	SaveCodeRepoBinding(ctx context.Context, req *SaveRequest, opts ...http.CallOption) (rsp *SaveReply, err error)
}

type CodeRepoBindingHTTPClientImpl struct {
	cc *http.Client
}

func NewCodeRepoBindingHTTPClient(client *http.Client) CodeRepoBindingHTTPClient {
	return &CodeRepoBindingHTTPClientImpl{client}
}

func (c *CodeRepoBindingHTTPClientImpl) DeleteCodeRepoBinding(ctx context.Context, in *DeleteRequest, opts ...http.CallOption) (*DeleteReply, error) {
	var out DeleteReply
	pattern := "/api/v1/products/{product_name}/coderepobindings/{coderepo_binding_name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCodeRepoBindingDeleteCodeRepoBinding))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CodeRepoBindingHTTPClientImpl) GetCodeRepoBinding(ctx context.Context, in *GetRequest, opts ...http.CallOption) (*GetReply, error) {
	var out GetReply
	pattern := "/api/v1/products/{product_name}/coderepobindings/{coderepo_binding_name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCodeRepoBindingGetCodeRepoBinding))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CodeRepoBindingHTTPClientImpl) ListCodeRepoBindings(ctx context.Context, in *ListsRequest, opts ...http.CallOption) (*ListsReply, error) {
	var out ListsReply
	pattern := "/api/v1/products/{product_name}/coderepobindings"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCodeRepoBindingListCodeRepoBindings))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CodeRepoBindingHTTPClientImpl) SaveCodeRepoBinding(ctx context.Context, in *SaveRequest, opts ...http.CallOption) (*SaveReply, error) {
	var out SaveReply
	pattern := "/api/v1/products/{product_name}/coderepobindings/{coderepo_binding_name}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCodeRepoBindingSaveCodeRepoBinding))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Body, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
