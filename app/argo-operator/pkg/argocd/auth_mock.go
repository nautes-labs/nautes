// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/argocd/auth.go

// Package mock_argocdClient is a generated GoMock package.
package argocd

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthOperation is a mock of AuthOperation interface.
type MockAuthOperation struct {
	ctrl     *gomock.Controller
	recorder *MockAuthOperationMockRecorder
}

// MockAuthOperationMockRecorder is the mock recorder for MockAuthOperation.
type MockAuthOperationMockRecorder struct {
	mock *MockAuthOperation
}

// NewMockAuthOperation creates a new mock instance.
func NewMockAuthOperation(ctrl *gomock.Controller) *MockAuthOperation {
	mock := &MockAuthOperation{ctrl: ctrl}
	mock.recorder = &MockAuthOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthOperation) EXPECT() *MockAuthOperationMockRecorder {
	return m.recorder
}

// GetPassword mocks base method.
func (m *MockAuthOperation) GetPassword() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassword indicates an expected call of GetPassword.
func (mr *MockAuthOperationMockRecorder) GetPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockAuthOperation)(nil).GetPassword))
}

// Login mocks base method.
func (m *MockAuthOperation) Login() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login")
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockAuthOperationMockRecorder) Login() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthOperation)(nil).Login))
}
