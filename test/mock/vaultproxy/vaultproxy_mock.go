// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/client/vaultproxy/vaultproxy_http.pb.go

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	http "github.com/go-kratos/kratos/v2/transport/http"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/nautes-labs/nautes/pkg/client/vaultproxy"
)

// MockSecretHTTPServer is a mock of SecretHTTPServer interface.
type MockSecretHTTPServer struct {
	ctrl     *gomock.Controller
	recorder *MockSecretHTTPServerMockRecorder
}

// MockSecretHTTPServerMockRecorder is the mock recorder for MockSecretHTTPServer.
type MockSecretHTTPServerMockRecorder struct {
	mock *MockSecretHTTPServer
}

// NewMockSecretHTTPServer creates a new mock instance.
func NewMockSecretHTTPServer(ctrl *gomock.Controller) *MockSecretHTTPServer {
	mock := &MockSecretHTTPServer{ctrl: ctrl}
	mock.recorder = &MockSecretHTTPServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretHTTPServer) EXPECT() *MockSecretHTTPServerMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method.
func (m *MockSecretHTTPServer) CreateCluster(arg0 context.Context, arg1 *v1.ClusterRequest) (*v1.CreateClusterReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateClusterReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockSecretHTTPServerMockRecorder) CreateCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockSecretHTTPServer)(nil).CreateCluster), arg0, arg1)
}

// CreateGit mocks base method.
func (m *MockSecretHTTPServer) CreateGit(arg0 context.Context, arg1 *v1.GitRequest) (*v1.CreateGitReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGit", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateGitReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGit indicates an expected call of CreateGit.
func (mr *MockSecretHTTPServerMockRecorder) CreateGit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGit", reflect.TypeOf((*MockSecretHTTPServer)(nil).CreateGit), arg0, arg1)
}

// CreatePki mocks base method.
func (m *MockSecretHTTPServer) CreatePki(arg0 context.Context, arg1 *v1.PkiRequest) (*v1.CreatePkiReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePki", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreatePkiReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePki indicates an expected call of CreatePki.
func (mr *MockSecretHTTPServerMockRecorder) CreatePki(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePki", reflect.TypeOf((*MockSecretHTTPServer)(nil).CreatePki), arg0, arg1)
}

// CreateRepoAccount mocks base method.
func (m *MockSecretHTTPServer) CreateRepoAccount(arg0 context.Context, arg1 *v1.RepoRequest) (*v1.CreateRepoReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepoAccount", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateRepoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepoAccount indicates an expected call of CreateRepoAccount.
func (mr *MockSecretHTTPServerMockRecorder) CreateRepoAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepoAccount", reflect.TypeOf((*MockSecretHTTPServer)(nil).CreateRepoAccount), arg0, arg1)
}

// CreateTenantRepo mocks base method.
func (m *MockSecretHTTPServer) CreateTenantRepo(arg0 context.Context, arg1 *v1.TenantRepoRequest) (*v1.CreateTenantRepoReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTenantRepo", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateTenantRepoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTenantRepo indicates an expected call of CreateTenantRepo.
func (mr *MockSecretHTTPServerMockRecorder) CreateTenantRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTenantRepo", reflect.TypeOf((*MockSecretHTTPServer)(nil).CreateTenantRepo), arg0, arg1)
}

// CreteTenantGit mocks base method.
func (m *MockSecretHTTPServer) CreteTenantGit(arg0 context.Context, arg1 *v1.TenantGitRequest) (*v1.CreateTenantGitReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreteTenantGit", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateTenantGitReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreteTenantGit indicates an expected call of CreteTenantGit.
func (mr *MockSecretHTTPServerMockRecorder) CreteTenantGit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreteTenantGit", reflect.TypeOf((*MockSecretHTTPServer)(nil).CreteTenantGit), arg0, arg1)
}

// DeleteCluster mocks base method.
func (m *MockSecretHTTPServer) DeleteCluster(arg0 context.Context, arg1 *v1.ClusterRequest) (*v1.DeleteClusterReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteClusterReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockSecretHTTPServerMockRecorder) DeleteCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockSecretHTTPServer)(nil).DeleteCluster), arg0, arg1)
}

// DeleteGit mocks base method.
func (m *MockSecretHTTPServer) DeleteGit(arg0 context.Context, arg1 *v1.GitRequest) (*v1.DeleteGitReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGit", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteGitReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGit indicates an expected call of DeleteGit.
func (mr *MockSecretHTTPServerMockRecorder) DeleteGit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGit", reflect.TypeOf((*MockSecretHTTPServer)(nil).DeleteGit), arg0, arg1)
}

// DeletePki mocks base method.
func (m *MockSecretHTTPServer) DeletePki(arg0 context.Context, arg1 *v1.PkiRequest) (*v1.DeletePkiReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePki", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeletePkiReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePki indicates an expected call of DeletePki.
func (mr *MockSecretHTTPServerMockRecorder) DeletePki(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePki", reflect.TypeOf((*MockSecretHTTPServer)(nil).DeletePki), arg0, arg1)
}

// DeleteRepoAccountProduct mocks base method.
func (m *MockSecretHTTPServer) DeleteRepoAccountProduct(arg0 context.Context, arg1 *v1.RepoRequest) (*v1.DeleteRepoReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepoAccountProduct", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteRepoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRepoAccountProduct indicates an expected call of DeleteRepoAccountProduct.
func (mr *MockSecretHTTPServerMockRecorder) DeleteRepoAccountProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepoAccountProduct", reflect.TypeOf((*MockSecretHTTPServer)(nil).DeleteRepoAccountProduct), arg0, arg1)
}

// DeleteRepoAccountProject mocks base method.
func (m *MockSecretHTTPServer) DeleteRepoAccountProject(arg0 context.Context, arg1 *v1.RepoRequest) (*v1.DeleteRepoReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepoAccountProject", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteRepoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRepoAccountProject indicates an expected call of DeleteRepoAccountProject.
func (mr *MockSecretHTTPServerMockRecorder) DeleteRepoAccountProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepoAccountProject", reflect.TypeOf((*MockSecretHTTPServer)(nil).DeleteRepoAccountProject), arg0, arg1)
}

// DeleteTenantGit mocks base method.
func (m *MockSecretHTTPServer) DeleteTenantGit(arg0 context.Context, arg1 *v1.TenantGitRequest) (*v1.DeleteTenantGitReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTenantGit", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteTenantGitReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTenantGit indicates an expected call of DeleteTenantGit.
func (mr *MockSecretHTTPServerMockRecorder) DeleteTenantGit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTenantGit", reflect.TypeOf((*MockSecretHTTPServer)(nil).DeleteTenantGit), arg0, arg1)
}

// DeleteTenantRepo mocks base method.
func (m *MockSecretHTTPServer) DeleteTenantRepo(arg0 context.Context, arg1 *v1.TenantRepoRequest) (*v1.DeleteTenantRepoReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTenantRepo", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteTenantRepoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTenantRepo indicates an expected call of DeleteTenantRepo.
func (mr *MockSecretHTTPServerMockRecorder) DeleteTenantRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTenantRepo", reflect.TypeOf((*MockSecretHTTPServer)(nil).DeleteTenantRepo), arg0, arg1)
}

// MockSecretHTTPClient is a mock of SecretHTTPClient interface.
type MockSecretHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockSecretHTTPClientMockRecorder
}

// MockSecretHTTPClientMockRecorder is the mock recorder for MockSecretHTTPClient.
type MockSecretHTTPClientMockRecorder struct {
	mock *MockSecretHTTPClient
}

// NewMockSecretHTTPClient creates a new mock instance.
func NewMockSecretHTTPClient(ctrl *gomock.Controller) *MockSecretHTTPClient {
	mock := &MockSecretHTTPClient{ctrl: ctrl}
	mock.recorder = &MockSecretHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretHTTPClient) EXPECT() *MockSecretHTTPClientMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method.
func (m *MockSecretHTTPClient) CreateCluster(ctx context.Context, req *v1.ClusterRequest, opts ...http.CallOption) (*v1.CreateClusterReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCluster", varargs...)
	ret0, _ := ret[0].(*v1.CreateClusterReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockSecretHTTPClientMockRecorder) CreateCluster(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockSecretHTTPClient)(nil).CreateCluster), varargs...)
}

// CreateGit mocks base method.
func (m *MockSecretHTTPClient) CreateGit(ctx context.Context, req *v1.GitRequest, opts ...http.CallOption) (*v1.CreateGitReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGit", varargs...)
	ret0, _ := ret[0].(*v1.CreateGitReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGit indicates an expected call of CreateGit.
func (mr *MockSecretHTTPClientMockRecorder) CreateGit(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGit", reflect.TypeOf((*MockSecretHTTPClient)(nil).CreateGit), varargs...)
}

// CreatePki mocks base method.
func (m *MockSecretHTTPClient) CreatePki(ctx context.Context, req *v1.PkiRequest, opts ...http.CallOption) (*v1.CreatePkiReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePki", varargs...)
	ret0, _ := ret[0].(*v1.CreatePkiReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePki indicates an expected call of CreatePki.
func (mr *MockSecretHTTPClientMockRecorder) CreatePki(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePki", reflect.TypeOf((*MockSecretHTTPClient)(nil).CreatePki), varargs...)
}

// CreateRepoAccount mocks base method.
func (m *MockSecretHTTPClient) CreateRepoAccount(ctx context.Context, req *v1.RepoRequest, opts ...http.CallOption) (*v1.CreateRepoReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRepoAccount", varargs...)
	ret0, _ := ret[0].(*v1.CreateRepoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepoAccount indicates an expected call of CreateRepoAccount.
func (mr *MockSecretHTTPClientMockRecorder) CreateRepoAccount(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepoAccount", reflect.TypeOf((*MockSecretHTTPClient)(nil).CreateRepoAccount), varargs...)
}

// CreateTenantRepo mocks base method.
func (m *MockSecretHTTPClient) CreateTenantRepo(ctx context.Context, req *v1.TenantRepoRequest, opts ...http.CallOption) (*v1.CreateTenantRepoReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTenantRepo", varargs...)
	ret0, _ := ret[0].(*v1.CreateTenantRepoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTenantRepo indicates an expected call of CreateTenantRepo.
func (mr *MockSecretHTTPClientMockRecorder) CreateTenantRepo(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTenantRepo", reflect.TypeOf((*MockSecretHTTPClient)(nil).CreateTenantRepo), varargs...)
}

// CreteTenantGit mocks base method.
func (m *MockSecretHTTPClient) CreteTenantGit(ctx context.Context, req *v1.TenantGitRequest, opts ...http.CallOption) (*v1.CreateTenantGitReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreteTenantGit", varargs...)
	ret0, _ := ret[0].(*v1.CreateTenantGitReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreteTenantGit indicates an expected call of CreteTenantGit.
func (mr *MockSecretHTTPClientMockRecorder) CreteTenantGit(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreteTenantGit", reflect.TypeOf((*MockSecretHTTPClient)(nil).CreteTenantGit), varargs...)
}

// DeleteCluster mocks base method.
func (m *MockSecretHTTPClient) DeleteCluster(ctx context.Context, req *v1.ClusterRequest, opts ...http.CallOption) (*v1.DeleteClusterReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCluster", varargs...)
	ret0, _ := ret[0].(*v1.DeleteClusterReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockSecretHTTPClientMockRecorder) DeleteCluster(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockSecretHTTPClient)(nil).DeleteCluster), varargs...)
}

// DeleteGit mocks base method.
func (m *MockSecretHTTPClient) DeleteGit(ctx context.Context, req *v1.GitRequest, opts ...http.CallOption) (*v1.DeleteGitReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGit", varargs...)
	ret0, _ := ret[0].(*v1.DeleteGitReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGit indicates an expected call of DeleteGit.
func (mr *MockSecretHTTPClientMockRecorder) DeleteGit(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGit", reflect.TypeOf((*MockSecretHTTPClient)(nil).DeleteGit), varargs...)
}

// DeletePki mocks base method.
func (m *MockSecretHTTPClient) DeletePki(ctx context.Context, req *v1.PkiRequest, opts ...http.CallOption) (*v1.DeletePkiReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePki", varargs...)
	ret0, _ := ret[0].(*v1.DeletePkiReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePki indicates an expected call of DeletePki.
func (mr *MockSecretHTTPClientMockRecorder) DeletePki(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePki", reflect.TypeOf((*MockSecretHTTPClient)(nil).DeletePki), varargs...)
}

// DeleteRepoAccountProduct mocks base method.
func (m *MockSecretHTTPClient) DeleteRepoAccountProduct(ctx context.Context, req *v1.RepoRequest, opts ...http.CallOption) (*v1.DeleteRepoReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRepoAccountProduct", varargs...)
	ret0, _ := ret[0].(*v1.DeleteRepoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRepoAccountProduct indicates an expected call of DeleteRepoAccountProduct.
func (mr *MockSecretHTTPClientMockRecorder) DeleteRepoAccountProduct(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepoAccountProduct", reflect.TypeOf((*MockSecretHTTPClient)(nil).DeleteRepoAccountProduct), varargs...)
}

// DeleteRepoAccountProject mocks base method.
func (m *MockSecretHTTPClient) DeleteRepoAccountProject(ctx context.Context, req *v1.RepoRequest, opts ...http.CallOption) (*v1.DeleteRepoReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRepoAccountProject", varargs...)
	ret0, _ := ret[0].(*v1.DeleteRepoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRepoAccountProject indicates an expected call of DeleteRepoAccountProject.
func (mr *MockSecretHTTPClientMockRecorder) DeleteRepoAccountProject(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepoAccountProject", reflect.TypeOf((*MockSecretHTTPClient)(nil).DeleteRepoAccountProject), varargs...)
}

// DeleteTenantGit mocks base method.
func (m *MockSecretHTTPClient) DeleteTenantGit(ctx context.Context, req *v1.TenantGitRequest, opts ...http.CallOption) (*v1.DeleteTenantGitReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTenantGit", varargs...)
	ret0, _ := ret[0].(*v1.DeleteTenantGitReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTenantGit indicates an expected call of DeleteTenantGit.
func (mr *MockSecretHTTPClientMockRecorder) DeleteTenantGit(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTenantGit", reflect.TypeOf((*MockSecretHTTPClient)(nil).DeleteTenantGit), varargs...)
}

// DeleteTenantRepo mocks base method.
func (m *MockSecretHTTPClient) DeleteTenantRepo(ctx context.Context, req *v1.TenantRepoRequest, opts ...http.CallOption) (*v1.DeleteTenantRepoReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTenantRepo", varargs...)
	ret0, _ := ret[0].(*v1.DeleteTenantRepoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTenantRepo indicates an expected call of DeleteTenantRepo.
func (mr *MockSecretHTTPClientMockRecorder) DeleteTenantRepo(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTenantRepo", reflect.TypeOf((*MockSecretHTTPClient)(nil).DeleteTenantRepo), varargs...)
}

// MockAuthHTTPServer is a mock of AuthHTTPServer interface.
type MockAuthHTTPServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthHTTPServerMockRecorder
}

// MockAuthHTTPServerMockRecorder is the mock recorder for MockAuthHTTPServer.
type MockAuthHTTPServerMockRecorder struct {
	mock *MockAuthHTTPServer
}

// NewMockAuthHTTPServer creates a new mock instance.
func NewMockAuthHTTPServer(ctrl *gomock.Controller) *MockAuthHTTPServer {
	mock := &MockAuthHTTPServer{ctrl: ctrl}
	mock.recorder = &MockAuthHTTPServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthHTTPServer) EXPECT() *MockAuthHTTPServerMockRecorder {
	return m.recorder
}

// CreateAuth mocks base method.
func (m *MockAuthHTTPServer) CreateAuth(arg0 context.Context, arg1 *v1.AuthRequest) (*v1.CreateAuthReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuth", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateAuthReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuth indicates an expected call of CreateAuth.
func (mr *MockAuthHTTPServerMockRecorder) CreateAuth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuth", reflect.TypeOf((*MockAuthHTTPServer)(nil).CreateAuth), arg0, arg1)
}

// CreateAuthrole mocks base method.
func (m *MockAuthHTTPServer) CreateAuthrole(arg0 context.Context, arg1 *v1.AuthroleRequest) (*v1.CreateAuthroleReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthrole", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateAuthroleReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthrole indicates an expected call of CreateAuthrole.
func (mr *MockAuthHTTPServerMockRecorder) CreateAuthrole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthrole", reflect.TypeOf((*MockAuthHTTPServer)(nil).CreateAuthrole), arg0, arg1)
}

// DeleteAuth mocks base method.
func (m *MockAuthHTTPServer) DeleteAuth(arg0 context.Context, arg1 *v1.AuthRequest) (*v1.DeleteAuthReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuth", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteAuthReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuth indicates an expected call of DeleteAuth.
func (mr *MockAuthHTTPServerMockRecorder) DeleteAuth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuth", reflect.TypeOf((*MockAuthHTTPServer)(nil).DeleteAuth), arg0, arg1)
}

// DeleteAuthrole mocks base method.
func (m *MockAuthHTTPServer) DeleteAuthrole(arg0 context.Context, arg1 *v1.AuthroleRequest) (*v1.DeleteAuthroleReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthrole", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteAuthroleReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthrole indicates an expected call of DeleteAuthrole.
func (mr *MockAuthHTTPServerMockRecorder) DeleteAuthrole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthrole", reflect.TypeOf((*MockAuthHTTPServer)(nil).DeleteAuthrole), arg0, arg1)
}

// MockAuthHTTPClient is a mock of AuthHTTPClient interface.
type MockAuthHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthHTTPClientMockRecorder
}

// MockAuthHTTPClientMockRecorder is the mock recorder for MockAuthHTTPClient.
type MockAuthHTTPClientMockRecorder struct {
	mock *MockAuthHTTPClient
}

// NewMockAuthHTTPClient creates a new mock instance.
func NewMockAuthHTTPClient(ctrl *gomock.Controller) *MockAuthHTTPClient {
	mock := &MockAuthHTTPClient{ctrl: ctrl}
	mock.recorder = &MockAuthHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthHTTPClient) EXPECT() *MockAuthHTTPClientMockRecorder {
	return m.recorder
}

// CreateAuth mocks base method.
func (m *MockAuthHTTPClient) CreateAuth(ctx context.Context, req *v1.AuthRequest, opts ...http.CallOption) (*v1.CreateAuthReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAuth", varargs...)
	ret0, _ := ret[0].(*v1.CreateAuthReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuth indicates an expected call of CreateAuth.
func (mr *MockAuthHTTPClientMockRecorder) CreateAuth(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuth", reflect.TypeOf((*MockAuthHTTPClient)(nil).CreateAuth), varargs...)
}

// CreateAuthrole mocks base method.
func (m *MockAuthHTTPClient) CreateAuthrole(ctx context.Context, req *v1.AuthroleRequest, opts ...http.CallOption) (*v1.CreateAuthroleReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAuthrole", varargs...)
	ret0, _ := ret[0].(*v1.CreateAuthroleReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthrole indicates an expected call of CreateAuthrole.
func (mr *MockAuthHTTPClientMockRecorder) CreateAuthrole(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthrole", reflect.TypeOf((*MockAuthHTTPClient)(nil).CreateAuthrole), varargs...)
}

// DeleteAuth mocks base method.
func (m *MockAuthHTTPClient) DeleteAuth(ctx context.Context, req *v1.AuthRequest, opts ...http.CallOption) (*v1.DeleteAuthReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAuth", varargs...)
	ret0, _ := ret[0].(*v1.DeleteAuthReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuth indicates an expected call of DeleteAuth.
func (mr *MockAuthHTTPClientMockRecorder) DeleteAuth(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuth", reflect.TypeOf((*MockAuthHTTPClient)(nil).DeleteAuth), varargs...)
}

// DeleteAuthrole mocks base method.
func (m *MockAuthHTTPClient) DeleteAuthrole(ctx context.Context, req *v1.AuthroleRequest, opts ...http.CallOption) (*v1.DeleteAuthroleReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAuthrole", varargs...)
	ret0, _ := ret[0].(*v1.DeleteAuthroleReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthrole indicates an expected call of DeleteAuthrole.
func (mr *MockAuthHTTPClientMockRecorder) DeleteAuthrole(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthrole", reflect.TypeOf((*MockAuthHTTPClient)(nil).DeleteAuthrole), varargs...)
}

// MockAuthGrantHTTPServer is a mock of AuthGrantHTTPServer interface.
type MockAuthGrantHTTPServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthGrantHTTPServerMockRecorder
}

// MockAuthGrantHTTPServerMockRecorder is the mock recorder for MockAuthGrantHTTPServer.
type MockAuthGrantHTTPServerMockRecorder struct {
	mock *MockAuthGrantHTTPServer
}

// NewMockAuthGrantHTTPServer creates a new mock instance.
func NewMockAuthGrantHTTPServer(ctrl *gomock.Controller) *MockAuthGrantHTTPServer {
	mock := &MockAuthGrantHTTPServer{ctrl: ctrl}
	mock.recorder = &MockAuthGrantHTTPServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthGrantHTTPServer) EXPECT() *MockAuthGrantHTTPServerMockRecorder {
	return m.recorder
}

// GrantAuthroleClusterPolicy mocks base method.
func (m *MockAuthGrantHTTPServer) GrantAuthroleClusterPolicy(arg0 context.Context, arg1 *v1.AuthroleClusterPolicyRequest) (*v1.GrantAuthrolePolicyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantAuthroleClusterPolicy", arg0, arg1)
	ret0, _ := ret[0].(*v1.GrantAuthrolePolicyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantAuthroleClusterPolicy indicates an expected call of GrantAuthroleClusterPolicy.
func (mr *MockAuthGrantHTTPServerMockRecorder) GrantAuthroleClusterPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantAuthroleClusterPolicy", reflect.TypeOf((*MockAuthGrantHTTPServer)(nil).GrantAuthroleClusterPolicy), arg0, arg1)
}

// GrantAuthroleGitPolicy mocks base method.
func (m *MockAuthGrantHTTPServer) GrantAuthroleGitPolicy(arg0 context.Context, arg1 *v1.AuthroleGitPolicyRequest) (*v1.GrantAuthrolePolicyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantAuthroleGitPolicy", arg0, arg1)
	ret0, _ := ret[0].(*v1.GrantAuthrolePolicyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantAuthroleGitPolicy indicates an expected call of GrantAuthroleGitPolicy.
func (mr *MockAuthGrantHTTPServerMockRecorder) GrantAuthroleGitPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantAuthroleGitPolicy", reflect.TypeOf((*MockAuthGrantHTTPServer)(nil).GrantAuthroleGitPolicy), arg0, arg1)
}

// GrantAuthroleRepoPolicy mocks base method.
func (m *MockAuthGrantHTTPServer) GrantAuthroleRepoPolicy(arg0 context.Context, arg1 *v1.AuthroleRepoPolicyRequest) (*v1.GrantAuthrolePolicyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantAuthroleRepoPolicy", arg0, arg1)
	ret0, _ := ret[0].(*v1.GrantAuthrolePolicyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantAuthroleRepoPolicy indicates an expected call of GrantAuthroleRepoPolicy.
func (mr *MockAuthGrantHTTPServerMockRecorder) GrantAuthroleRepoPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantAuthroleRepoPolicy", reflect.TypeOf((*MockAuthGrantHTTPServer)(nil).GrantAuthroleRepoPolicy), arg0, arg1)
}

// GrantAuthroleTenantGitPolicy mocks base method.
func (m *MockAuthGrantHTTPServer) GrantAuthroleTenantGitPolicy(arg0 context.Context, arg1 *v1.AuthroleTenantGitPolicyRequest) (*v1.GrantAuthrolePolicyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantAuthroleTenantGitPolicy", arg0, arg1)
	ret0, _ := ret[0].(*v1.GrantAuthrolePolicyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantAuthroleTenantGitPolicy indicates an expected call of GrantAuthroleTenantGitPolicy.
func (mr *MockAuthGrantHTTPServerMockRecorder) GrantAuthroleTenantGitPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantAuthroleTenantGitPolicy", reflect.TypeOf((*MockAuthGrantHTTPServer)(nil).GrantAuthroleTenantGitPolicy), arg0, arg1)
}

// GrantAuthroleTenantRepoPolicy mocks base method.
func (m *MockAuthGrantHTTPServer) GrantAuthroleTenantRepoPolicy(arg0 context.Context, arg1 *v1.AuthroleTenantRepoPolicyRequest) (*v1.GrantAuthrolePolicyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantAuthroleTenantRepoPolicy", arg0, arg1)
	ret0, _ := ret[0].(*v1.GrantAuthrolePolicyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantAuthroleTenantRepoPolicy indicates an expected call of GrantAuthroleTenantRepoPolicy.
func (mr *MockAuthGrantHTTPServerMockRecorder) GrantAuthroleTenantRepoPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantAuthroleTenantRepoPolicy", reflect.TypeOf((*MockAuthGrantHTTPServer)(nil).GrantAuthroleTenantRepoPolicy), arg0, arg1)
}

// RevokeAuthroleClusterPolicy mocks base method.
func (m *MockAuthGrantHTTPServer) RevokeAuthroleClusterPolicy(arg0 context.Context, arg1 *v1.AuthroleClusterPolicyRequest) (*v1.RevokeAuthrolePolicyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAuthroleClusterPolicy", arg0, arg1)
	ret0, _ := ret[0].(*v1.RevokeAuthrolePolicyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeAuthroleClusterPolicy indicates an expected call of RevokeAuthroleClusterPolicy.
func (mr *MockAuthGrantHTTPServerMockRecorder) RevokeAuthroleClusterPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAuthroleClusterPolicy", reflect.TypeOf((*MockAuthGrantHTTPServer)(nil).RevokeAuthroleClusterPolicy), arg0, arg1)
}

// RevokeAuthroleGitPolicy mocks base method.
func (m *MockAuthGrantHTTPServer) RevokeAuthroleGitPolicy(arg0 context.Context, arg1 *v1.AuthroleGitPolicyRequest) (*v1.RevokeAuthrolePolicyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAuthroleGitPolicy", arg0, arg1)
	ret0, _ := ret[0].(*v1.RevokeAuthrolePolicyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeAuthroleGitPolicy indicates an expected call of RevokeAuthroleGitPolicy.
func (mr *MockAuthGrantHTTPServerMockRecorder) RevokeAuthroleGitPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAuthroleGitPolicy", reflect.TypeOf((*MockAuthGrantHTTPServer)(nil).RevokeAuthroleGitPolicy), arg0, arg1)
}

// RevokeAuthroleRepoPolicy mocks base method.
func (m *MockAuthGrantHTTPServer) RevokeAuthroleRepoPolicy(arg0 context.Context, arg1 *v1.AuthroleRepoPolicyRequest) (*v1.RevokeAuthrolePolicyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAuthroleRepoPolicy", arg0, arg1)
	ret0, _ := ret[0].(*v1.RevokeAuthrolePolicyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeAuthroleRepoPolicy indicates an expected call of RevokeAuthroleRepoPolicy.
func (mr *MockAuthGrantHTTPServerMockRecorder) RevokeAuthroleRepoPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAuthroleRepoPolicy", reflect.TypeOf((*MockAuthGrantHTTPServer)(nil).RevokeAuthroleRepoPolicy), arg0, arg1)
}

// RevokeAuthroleTenantGitPolicy mocks base method.
func (m *MockAuthGrantHTTPServer) RevokeAuthroleTenantGitPolicy(arg0 context.Context, arg1 *v1.AuthroleTenantGitPolicyRequest) (*v1.RevokeAuthrolePolicyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAuthroleTenantGitPolicy", arg0, arg1)
	ret0, _ := ret[0].(*v1.RevokeAuthrolePolicyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeAuthroleTenantGitPolicy indicates an expected call of RevokeAuthroleTenantGitPolicy.
func (mr *MockAuthGrantHTTPServerMockRecorder) RevokeAuthroleTenantGitPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAuthroleTenantGitPolicy", reflect.TypeOf((*MockAuthGrantHTTPServer)(nil).RevokeAuthroleTenantGitPolicy), arg0, arg1)
}

// RevokeAuthroleTenantRepoPolicy mocks base method.
func (m *MockAuthGrantHTTPServer) RevokeAuthroleTenantRepoPolicy(arg0 context.Context, arg1 *v1.AuthroleTenantRepoPolicyRequest) (*v1.RevokeAuthrolePolicyReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAuthroleTenantRepoPolicy", arg0, arg1)
	ret0, _ := ret[0].(*v1.RevokeAuthrolePolicyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeAuthroleTenantRepoPolicy indicates an expected call of RevokeAuthroleTenantRepoPolicy.
func (mr *MockAuthGrantHTTPServerMockRecorder) RevokeAuthroleTenantRepoPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAuthroleTenantRepoPolicy", reflect.TypeOf((*MockAuthGrantHTTPServer)(nil).RevokeAuthroleTenantRepoPolicy), arg0, arg1)
}

// MockAuthGrantHTTPClient is a mock of AuthGrantHTTPClient interface.
type MockAuthGrantHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthGrantHTTPClientMockRecorder
}

// MockAuthGrantHTTPClientMockRecorder is the mock recorder for MockAuthGrantHTTPClient.
type MockAuthGrantHTTPClientMockRecorder struct {
	mock *MockAuthGrantHTTPClient
}

// NewMockAuthGrantHTTPClient creates a new mock instance.
func NewMockAuthGrantHTTPClient(ctrl *gomock.Controller) *MockAuthGrantHTTPClient {
	mock := &MockAuthGrantHTTPClient{ctrl: ctrl}
	mock.recorder = &MockAuthGrantHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthGrantHTTPClient) EXPECT() *MockAuthGrantHTTPClientMockRecorder {
	return m.recorder
}

// GrantAuthroleClusterPolicy mocks base method.
func (m *MockAuthGrantHTTPClient) GrantAuthroleClusterPolicy(ctx context.Context, req *v1.AuthroleClusterPolicyRequest, opts ...http.CallOption) (*v1.GrantAuthrolePolicyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GrantAuthroleClusterPolicy", varargs...)
	ret0, _ := ret[0].(*v1.GrantAuthrolePolicyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantAuthroleClusterPolicy indicates an expected call of GrantAuthroleClusterPolicy.
func (mr *MockAuthGrantHTTPClientMockRecorder) GrantAuthroleClusterPolicy(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantAuthroleClusterPolicy", reflect.TypeOf((*MockAuthGrantHTTPClient)(nil).GrantAuthroleClusterPolicy), varargs...)
}

// GrantAuthroleGitPolicy mocks base method.
func (m *MockAuthGrantHTTPClient) GrantAuthroleGitPolicy(ctx context.Context, req *v1.AuthroleGitPolicyRequest, opts ...http.CallOption) (*v1.GrantAuthrolePolicyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GrantAuthroleGitPolicy", varargs...)
	ret0, _ := ret[0].(*v1.GrantAuthrolePolicyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantAuthroleGitPolicy indicates an expected call of GrantAuthroleGitPolicy.
func (mr *MockAuthGrantHTTPClientMockRecorder) GrantAuthroleGitPolicy(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantAuthroleGitPolicy", reflect.TypeOf((*MockAuthGrantHTTPClient)(nil).GrantAuthroleGitPolicy), varargs...)
}

// GrantAuthroleRepoPolicy mocks base method.
func (m *MockAuthGrantHTTPClient) GrantAuthroleRepoPolicy(ctx context.Context, req *v1.AuthroleRepoPolicyRequest, opts ...http.CallOption) (*v1.GrantAuthrolePolicyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GrantAuthroleRepoPolicy", varargs...)
	ret0, _ := ret[0].(*v1.GrantAuthrolePolicyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantAuthroleRepoPolicy indicates an expected call of GrantAuthroleRepoPolicy.
func (mr *MockAuthGrantHTTPClientMockRecorder) GrantAuthroleRepoPolicy(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantAuthroleRepoPolicy", reflect.TypeOf((*MockAuthGrantHTTPClient)(nil).GrantAuthroleRepoPolicy), varargs...)
}

// GrantAuthroleTenantGitPolicy mocks base method.
func (m *MockAuthGrantHTTPClient) GrantAuthroleTenantGitPolicy(ctx context.Context, req *v1.AuthroleTenantGitPolicyRequest, opts ...http.CallOption) (*v1.GrantAuthrolePolicyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GrantAuthroleTenantGitPolicy", varargs...)
	ret0, _ := ret[0].(*v1.GrantAuthrolePolicyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantAuthroleTenantGitPolicy indicates an expected call of GrantAuthroleTenantGitPolicy.
func (mr *MockAuthGrantHTTPClientMockRecorder) GrantAuthroleTenantGitPolicy(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantAuthroleTenantGitPolicy", reflect.TypeOf((*MockAuthGrantHTTPClient)(nil).GrantAuthroleTenantGitPolicy), varargs...)
}

// GrantAuthroleTenantRepoPolicy mocks base method.
func (m *MockAuthGrantHTTPClient) GrantAuthroleTenantRepoPolicy(ctx context.Context, req *v1.AuthroleTenantRepoPolicyRequest, opts ...http.CallOption) (*v1.GrantAuthrolePolicyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GrantAuthroleTenantRepoPolicy", varargs...)
	ret0, _ := ret[0].(*v1.GrantAuthrolePolicyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantAuthroleTenantRepoPolicy indicates an expected call of GrantAuthroleTenantRepoPolicy.
func (mr *MockAuthGrantHTTPClientMockRecorder) GrantAuthroleTenantRepoPolicy(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantAuthroleTenantRepoPolicy", reflect.TypeOf((*MockAuthGrantHTTPClient)(nil).GrantAuthroleTenantRepoPolicy), varargs...)
}

// RevokeAuthroleClusterPolicy mocks base method.
func (m *MockAuthGrantHTTPClient) RevokeAuthroleClusterPolicy(ctx context.Context, req *v1.AuthroleClusterPolicyRequest, opts ...http.CallOption) (*v1.RevokeAuthrolePolicyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeAuthroleClusterPolicy", varargs...)
	ret0, _ := ret[0].(*v1.RevokeAuthrolePolicyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeAuthroleClusterPolicy indicates an expected call of RevokeAuthroleClusterPolicy.
func (mr *MockAuthGrantHTTPClientMockRecorder) RevokeAuthroleClusterPolicy(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAuthroleClusterPolicy", reflect.TypeOf((*MockAuthGrantHTTPClient)(nil).RevokeAuthroleClusterPolicy), varargs...)
}

// RevokeAuthroleGitPolicy mocks base method.
func (m *MockAuthGrantHTTPClient) RevokeAuthroleGitPolicy(ctx context.Context, req *v1.AuthroleGitPolicyRequest, opts ...http.CallOption) (*v1.RevokeAuthrolePolicyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeAuthroleGitPolicy", varargs...)
	ret0, _ := ret[0].(*v1.RevokeAuthrolePolicyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeAuthroleGitPolicy indicates an expected call of RevokeAuthroleGitPolicy.
func (mr *MockAuthGrantHTTPClientMockRecorder) RevokeAuthroleGitPolicy(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAuthroleGitPolicy", reflect.TypeOf((*MockAuthGrantHTTPClient)(nil).RevokeAuthroleGitPolicy), varargs...)
}

// RevokeAuthroleRepoPolicy mocks base method.
func (m *MockAuthGrantHTTPClient) RevokeAuthroleRepoPolicy(ctx context.Context, req *v1.AuthroleRepoPolicyRequest, opts ...http.CallOption) (*v1.RevokeAuthrolePolicyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeAuthroleRepoPolicy", varargs...)
	ret0, _ := ret[0].(*v1.RevokeAuthrolePolicyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeAuthroleRepoPolicy indicates an expected call of RevokeAuthroleRepoPolicy.
func (mr *MockAuthGrantHTTPClientMockRecorder) RevokeAuthroleRepoPolicy(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAuthroleRepoPolicy", reflect.TypeOf((*MockAuthGrantHTTPClient)(nil).RevokeAuthroleRepoPolicy), varargs...)
}

// RevokeAuthroleTenantGitPolicy mocks base method.
func (m *MockAuthGrantHTTPClient) RevokeAuthroleTenantGitPolicy(ctx context.Context, req *v1.AuthroleTenantGitPolicyRequest, opts ...http.CallOption) (*v1.RevokeAuthrolePolicyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeAuthroleTenantGitPolicy", varargs...)
	ret0, _ := ret[0].(*v1.RevokeAuthrolePolicyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeAuthroleTenantGitPolicy indicates an expected call of RevokeAuthroleTenantGitPolicy.
func (mr *MockAuthGrantHTTPClientMockRecorder) RevokeAuthroleTenantGitPolicy(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAuthroleTenantGitPolicy", reflect.TypeOf((*MockAuthGrantHTTPClient)(nil).RevokeAuthroleTenantGitPolicy), varargs...)
}

// RevokeAuthroleTenantRepoPolicy mocks base method.
func (m *MockAuthGrantHTTPClient) RevokeAuthroleTenantRepoPolicy(ctx context.Context, req *v1.AuthroleTenantRepoPolicyRequest, opts ...http.CallOption) (*v1.RevokeAuthrolePolicyReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeAuthroleTenantRepoPolicy", varargs...)
	ret0, _ := ret[0].(*v1.RevokeAuthrolePolicyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeAuthroleTenantRepoPolicy indicates an expected call of RevokeAuthroleTenantRepoPolicy.
func (mr *MockAuthGrantHTTPClientMockRecorder) RevokeAuthroleTenantRepoPolicy(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAuthroleTenantRepoPolicy", reflect.TypeOf((*MockAuthGrantHTTPClient)(nil).RevokeAuthroleTenantRepoPolicy), varargs...)
}
