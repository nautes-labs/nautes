// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v4.23.2
// source: api/vaultproxy/v1/vaultproxy.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSecretCreateCluster = "/api.vaultproxy.v1.Secret/CreateCluster"
const OperationSecretCreateGit = "/api.vaultproxy.v1.Secret/CreateGit"
const OperationSecretCreatePki = "/api.vaultproxy.v1.Secret/CreatePki"
const OperationSecretCreateRepo = "/api.vaultproxy.v1.Secret/CreateRepo"
const OperationSecretCreateTenantRepo = "/api.vaultproxy.v1.Secret/CreateTenantRepo"
const OperationSecretCreteTenantGit = "/api.vaultproxy.v1.Secret/CreteTenantGit"
const OperationSecretDeleteCluster = "/api.vaultproxy.v1.Secret/DeleteCluster"
const OperationSecretDeleteGit = "/api.vaultproxy.v1.Secret/DeleteGit"
const OperationSecretDeletePki = "/api.vaultproxy.v1.Secret/DeletePki"
const OperationSecretDeleteRepo = "/api.vaultproxy.v1.Secret/DeleteRepo"
const OperationSecretDeleteTenantGit = "/api.vaultproxy.v1.Secret/DeleteTenantGit"
const OperationSecretDeleteTenantRepo = "/api.vaultproxy.v1.Secret/DeleteTenantRepo"

type SecretHTTPServer interface {
	CreateCluster(context.Context, *ClusterRequest) (*CreateClusterReply, error)
	CreateGit(context.Context, *GitRequest) (*CreateGitReply, error)
	CreatePki(context.Context, *PkiRequest) (*CreatePkiReply, error)
	CreateRepo(context.Context, *RepoRequest) (*CreateRepoReply, error)
	// CreateTenantRepo////////////////////////////////////////////////////////////////
	CreateTenantRepo(context.Context, *TenantRepoRequest) (*CreateTenantRepoReply, error)
	CreteTenantGit(context.Context, *TenantGitRequest) (*CreateTenantGitReply, error)
	DeleteCluster(context.Context, *ClusterRequest) (*DeleteClusterReply, error)
	DeleteGit(context.Context, *GitRequest) (*DeleteGitReply, error)
	DeletePki(context.Context, *PkiRequest) (*DeletePkiReply, error)
	DeleteRepo(context.Context, *RepoRequest) (*DeleteRepoReply, error)
	DeleteTenantGit(context.Context, *TenantGitRequest) (*DeleteTenantGitReply, error)
	DeleteTenantRepo(context.Context, *TenantRepoRequest) (*DeleteTenantRepoReply, error)
}

func RegisterSecretHTTPServer(s *http.Server, srv SecretHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/git", _Secret_CreateGit0_HTTP_Handler(srv))
	r.DELETE("/v1/git/{meta.provider_type}/{meta.id}/{meta.username}/{meta.permission}", _Secret_DeleteGit0_HTTP_Handler(srv))
	r.POST("/v1/pki", _Secret_CreatePki0_HTTP_Handler(srv))
	r.DELETE("/v1/pki/{domain}", _Secret_DeletePki0_HTTP_Handler(srv))
	r.POST("/v1/repo", _Secret_CreateRepo0_HTTP_Handler(srv))
	r.DELETE("/v1/repo/{meta.provider_id}/{meta.type}/{meta.id}/{meta.username}/{meta.permission}", _Secret_DeleteRepo0_HTTP_Handler(srv))
	r.POST("/v1/tenant/git", _Secret_CreteTenantGit0_HTTP_Handler(srv))
	r.DELETE("/v1/tenant/git/{meta.id}", _Secret_DeleteTenantGit0_HTTP_Handler(srv))
	r.POST("/v1/tenant/repos", _Secret_CreateTenantRepo0_HTTP_Handler(srv))
	r.DELETE("/v1/tenant/repos/{meta.id}", _Secret_DeleteTenantRepo0_HTTP_Handler(srv))
	r.POST("/v1/cluster", _Secret_CreateCluster0_HTTP_Handler(srv))
	r.DELETE("/v1/cluster/{meta.type}/{meta.id}/{meta.username}/{meta.permission}", _Secret_DeleteCluster0_HTTP_Handler(srv))
}

func _Secret_CreateGit0_HTTP_Handler(srv SecretHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GitRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSecretCreateGit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateGit(ctx, req.(*GitRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateGitReply)
		return ctx.Result(200, reply)
	}
}

func _Secret_DeleteGit0_HTTP_Handler(srv SecretHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GitRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSecretDeleteGit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteGit(ctx, req.(*GitRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteGitReply)
		return ctx.Result(200, reply)
	}
}

func _Secret_CreatePki0_HTTP_Handler(srv SecretHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PkiRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSecretCreatePki)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePki(ctx, req.(*PkiRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePkiReply)
		return ctx.Result(200, reply)
	}
}

func _Secret_DeletePki0_HTTP_Handler(srv SecretHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PkiRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSecretDeletePki)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePki(ctx, req.(*PkiRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeletePkiReply)
		return ctx.Result(200, reply)
	}
}

func _Secret_CreateRepo0_HTTP_Handler(srv SecretHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RepoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSecretCreateRepo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRepo(ctx, req.(*RepoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRepoReply)
		return ctx.Result(200, reply)
	}
}

func _Secret_DeleteRepo0_HTTP_Handler(srv SecretHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RepoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSecretDeleteRepo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRepo(ctx, req.(*RepoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRepoReply)
		return ctx.Result(200, reply)
	}
}

func _Secret_CreteTenantGit0_HTTP_Handler(srv SecretHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TenantGitRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSecretCreteTenantGit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreteTenantGit(ctx, req.(*TenantGitRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTenantGitReply)
		return ctx.Result(200, reply)
	}
}

func _Secret_DeleteTenantGit0_HTTP_Handler(srv SecretHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TenantGitRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSecretDeleteTenantGit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTenantGit(ctx, req.(*TenantGitRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteTenantGitReply)
		return ctx.Result(200, reply)
	}
}

func _Secret_CreateTenantRepo0_HTTP_Handler(srv SecretHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TenantRepoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSecretCreateTenantRepo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTenantRepo(ctx, req.(*TenantRepoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTenantRepoReply)
		return ctx.Result(200, reply)
	}
}

func _Secret_DeleteTenantRepo0_HTTP_Handler(srv SecretHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TenantRepoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSecretDeleteTenantRepo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTenantRepo(ctx, req.(*TenantRepoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteTenantRepoReply)
		return ctx.Result(200, reply)
	}
}

func _Secret_CreateCluster0_HTTP_Handler(srv SecretHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClusterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSecretCreateCluster)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCluster(ctx, req.(*ClusterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateClusterReply)
		return ctx.Result(200, reply)
	}
}

func _Secret_DeleteCluster0_HTTP_Handler(srv SecretHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClusterRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSecretDeleteCluster)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCluster(ctx, req.(*ClusterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteClusterReply)
		return ctx.Result(200, reply)
	}
}

type SecretHTTPClient interface {
	CreateCluster(ctx context.Context, req *ClusterRequest, opts ...http.CallOption) (rsp *CreateClusterReply, err error)
	CreateGit(ctx context.Context, req *GitRequest, opts ...http.CallOption) (rsp *CreateGitReply, err error)
	CreatePki(ctx context.Context, req *PkiRequest, opts ...http.CallOption) (rsp *CreatePkiReply, err error)
	CreateRepo(ctx context.Context, req *RepoRequest, opts ...http.CallOption) (rsp *CreateRepoReply, err error)
	CreateTenantRepo(ctx context.Context, req *TenantRepoRequest, opts ...http.CallOption) (rsp *CreateTenantRepoReply, err error)
	CreteTenantGit(ctx context.Context, req *TenantGitRequest, opts ...http.CallOption) (rsp *CreateTenantGitReply, err error)
	DeleteCluster(ctx context.Context, req *ClusterRequest, opts ...http.CallOption) (rsp *DeleteClusterReply, err error)
	DeleteGit(ctx context.Context, req *GitRequest, opts ...http.CallOption) (rsp *DeleteGitReply, err error)
	DeletePki(ctx context.Context, req *PkiRequest, opts ...http.CallOption) (rsp *DeletePkiReply, err error)
	DeleteRepo(ctx context.Context, req *RepoRequest, opts ...http.CallOption) (rsp *DeleteRepoReply, err error)
	DeleteTenantGit(ctx context.Context, req *TenantGitRequest, opts ...http.CallOption) (rsp *DeleteTenantGitReply, err error)
	DeleteTenantRepo(ctx context.Context, req *TenantRepoRequest, opts ...http.CallOption) (rsp *DeleteTenantRepoReply, err error)
}

type SecretHTTPClientImpl struct {
	cc *http.Client
}

func NewSecretHTTPClient(client *http.Client) SecretHTTPClient {
	return &SecretHTTPClientImpl{client}
}

func (c *SecretHTTPClientImpl) CreateCluster(ctx context.Context, in *ClusterRequest, opts ...http.CallOption) (*CreateClusterReply, error) {
	var out CreateClusterReply
	pattern := "/v1/cluster"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSecretCreateCluster))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SecretHTTPClientImpl) CreateGit(ctx context.Context, in *GitRequest, opts ...http.CallOption) (*CreateGitReply, error) {
	var out CreateGitReply
	pattern := "/v1/git"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSecretCreateGit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SecretHTTPClientImpl) CreatePki(ctx context.Context, in *PkiRequest, opts ...http.CallOption) (*CreatePkiReply, error) {
	var out CreatePkiReply
	pattern := "/v1/pki"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSecretCreatePki))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SecretHTTPClientImpl) CreateRepo(ctx context.Context, in *RepoRequest, opts ...http.CallOption) (*CreateRepoReply, error) {
	var out CreateRepoReply
	pattern := "/v1/repo"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSecretCreateRepo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SecretHTTPClientImpl) CreateTenantRepo(ctx context.Context, in *TenantRepoRequest, opts ...http.CallOption) (*CreateTenantRepoReply, error) {
	var out CreateTenantRepoReply
	pattern := "/v1/tenant/repos"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSecretCreateTenantRepo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SecretHTTPClientImpl) CreteTenantGit(ctx context.Context, in *TenantGitRequest, opts ...http.CallOption) (*CreateTenantGitReply, error) {
	var out CreateTenantGitReply
	pattern := "/v1/tenant/git"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSecretCreteTenantGit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SecretHTTPClientImpl) DeleteCluster(ctx context.Context, in *ClusterRequest, opts ...http.CallOption) (*DeleteClusterReply, error) {
	var out DeleteClusterReply
	pattern := "/v1/cluster/{meta.type}/{meta.id}/{meta.username}/{meta.permission}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSecretDeleteCluster))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SecretHTTPClientImpl) DeleteGit(ctx context.Context, in *GitRequest, opts ...http.CallOption) (*DeleteGitReply, error) {
	var out DeleteGitReply
	pattern := "/v1/git/{meta.provider_type}/{meta.id}/{meta.username}/{meta.permission}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSecretDeleteGit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SecretHTTPClientImpl) DeletePki(ctx context.Context, in *PkiRequest, opts ...http.CallOption) (*DeletePkiReply, error) {
	var out DeletePkiReply
	pattern := "/v1/pki/{domain}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSecretDeletePki))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SecretHTTPClientImpl) DeleteRepo(ctx context.Context, in *RepoRequest, opts ...http.CallOption) (*DeleteRepoReply, error) {
	var out DeleteRepoReply
	pattern := "/v1/repo/{meta.provider_id}/{meta.type}/{meta.id}/{meta.username}/{meta.permission}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSecretDeleteRepo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SecretHTTPClientImpl) DeleteTenantGit(ctx context.Context, in *TenantGitRequest, opts ...http.CallOption) (*DeleteTenantGitReply, error) {
	var out DeleteTenantGitReply
	pattern := "/v1/tenant/git/{meta.id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSecretDeleteTenantGit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SecretHTTPClientImpl) DeleteTenantRepo(ctx context.Context, in *TenantRepoRequest, opts ...http.CallOption) (*DeleteTenantRepoReply, error) {
	var out DeleteTenantRepoReply
	pattern := "/v1/tenant/repos/{meta.id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSecretDeleteTenantRepo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

const OperationAuthCreateAuth = "/api.vaultproxy.v1.Auth/CreateAuth"
const OperationAuthCreateAuthrole = "/api.vaultproxy.v1.Auth/CreateAuthrole"
const OperationAuthDeleteAuth = "/api.vaultproxy.v1.Auth/DeleteAuth"
const OperationAuthDeleteAuthrole = "/api.vaultproxy.v1.Auth/DeleteAuthrole"

type AuthHTTPServer interface {
	CreateAuth(context.Context, *AuthRequest) (*CreateAuthReply, error)
	CreateAuthrole(context.Context, *AuthroleRequest) (*CreateAuthroleReply, error)
	DeleteAuth(context.Context, *AuthRequest) (*DeleteAuthReply, error)
	DeleteAuthrole(context.Context, *AuthroleRequest) (*DeleteAuthroleReply, error)
}

func RegisterAuthHTTPServer(s *http.Server, srv AuthHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/auth", _Auth_CreateAuth0_HTTP_Handler(srv))
	r.DELETE("/v1/auth/{cluster_name}", _Auth_DeleteAuth0_HTTP_Handler(srv))
	r.POST("/v1/auth/{cluster_name}/role", _Auth_CreateAuthrole0_HTTP_Handler(srv))
	r.DELETE("/v1/auth/{cluster_name}/role/{dest_user}", _Auth_DeleteAuthrole0_HTTP_Handler(srv))
}

func _Auth_CreateAuth0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthCreateAuth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAuth(ctx, req.(*AuthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAuthReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_DeleteAuth0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthDeleteAuth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAuth(ctx, req.(*AuthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAuthReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_CreateAuthrole0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthroleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthCreateAuthrole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAuthrole(ctx, req.(*AuthroleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAuthroleReply)
		return ctx.Result(200, reply)
	}
}

func _Auth_DeleteAuthrole0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthroleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthDeleteAuthrole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAuthrole(ctx, req.(*AuthroleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAuthroleReply)
		return ctx.Result(200, reply)
	}
}

type AuthHTTPClient interface {
	CreateAuth(ctx context.Context, req *AuthRequest, opts ...http.CallOption) (rsp *CreateAuthReply, err error)
	CreateAuthrole(ctx context.Context, req *AuthroleRequest, opts ...http.CallOption) (rsp *CreateAuthroleReply, err error)
	DeleteAuth(ctx context.Context, req *AuthRequest, opts ...http.CallOption) (rsp *DeleteAuthReply, err error)
	DeleteAuthrole(ctx context.Context, req *AuthroleRequest, opts ...http.CallOption) (rsp *DeleteAuthroleReply, err error)
}

type AuthHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthHTTPClient(client *http.Client) AuthHTTPClient {
	return &AuthHTTPClientImpl{client}
}

func (c *AuthHTTPClientImpl) CreateAuth(ctx context.Context, in *AuthRequest, opts ...http.CallOption) (*CreateAuthReply, error) {
	var out CreateAuthReply
	pattern := "/v1/auth"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthCreateAuth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) CreateAuthrole(ctx context.Context, in *AuthroleRequest, opts ...http.CallOption) (*CreateAuthroleReply, error) {
	var out CreateAuthroleReply
	pattern := "/v1/auth/{cluster_name}/role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthCreateAuthrole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) DeleteAuth(ctx context.Context, in *AuthRequest, opts ...http.CallOption) (*DeleteAuthReply, error) {
	var out DeleteAuthReply
	pattern := "/v1/auth/{cluster_name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthDeleteAuth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) DeleteAuthrole(ctx context.Context, in *AuthroleRequest, opts ...http.CallOption) (*DeleteAuthroleReply, error) {
	var out DeleteAuthroleReply
	pattern := "/v1/auth/{cluster_name}/role/{dest_user}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthDeleteAuthrole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

const OperationAuthGrantGrantAuthroleClusterPolicy = "/api.vaultproxy.v1.AuthGrant/GrantAuthroleClusterPolicy"
const OperationAuthGrantGrantAuthroleGitPolicy = "/api.vaultproxy.v1.AuthGrant/GrantAuthroleGitPolicy"
const OperationAuthGrantGrantAuthroleRepoPolicy = "/api.vaultproxy.v1.AuthGrant/GrantAuthroleRepoPolicy"
const OperationAuthGrantGrantAuthroleTenantGitPolicy = "/api.vaultproxy.v1.AuthGrant/GrantAuthroleTenantGitPolicy"
const OperationAuthGrantGrantAuthroleTenantRepoPolicy = "/api.vaultproxy.v1.AuthGrant/GrantAuthroleTenantRepoPolicy"
const OperationAuthGrantRevokeAuthroleClusterPolicy = "/api.vaultproxy.v1.AuthGrant/RevokeAuthroleClusterPolicy"
const OperationAuthGrantRevokeAuthroleGitPolicy = "/api.vaultproxy.v1.AuthGrant/RevokeAuthroleGitPolicy"
const OperationAuthGrantRevokeAuthroleRepoPolicy = "/api.vaultproxy.v1.AuthGrant/RevokeAuthroleRepoPolicy"
const OperationAuthGrantRevokeAuthroleTenantGitPolicy = "/api.vaultproxy.v1.AuthGrant/RevokeAuthroleTenantGitPolicy"
const OperationAuthGrantRevokeAuthroleTenantRepoPolicy = "/api.vaultproxy.v1.AuthGrant/RevokeAuthroleTenantRepoPolicy"

type AuthGrantHTTPServer interface {
	GrantAuthroleClusterPolicy(context.Context, *AuthroleClusterPolicyRequest) (*GrantAuthrolePolicyReply, error)
	GrantAuthroleGitPolicy(context.Context, *AuthroleGitPolicyRequest) (*GrantAuthrolePolicyReply, error)
	GrantAuthroleRepoPolicy(context.Context, *AuthroleRepoPolicyRequest) (*GrantAuthrolePolicyReply, error)
	GrantAuthroleTenantGitPolicy(context.Context, *AuthroleTenantGitPolicyRequest) (*GrantAuthrolePolicyReply, error)
	GrantAuthroleTenantRepoPolicy(context.Context, *AuthroleTenantRepoPolicyRequest) (*GrantAuthrolePolicyReply, error)
	RevokeAuthroleClusterPolicy(context.Context, *AuthroleClusterPolicyRequest) (*RevokeAuthrolePolicyReply, error)
	RevokeAuthroleGitPolicy(context.Context, *AuthroleGitPolicyRequest) (*RevokeAuthrolePolicyReply, error)
	RevokeAuthroleRepoPolicy(context.Context, *AuthroleRepoPolicyRequest) (*RevokeAuthrolePolicyReply, error)
	RevokeAuthroleTenantGitPolicy(context.Context, *AuthroleTenantGitPolicyRequest) (*RevokeAuthrolePolicyReply, error)
	RevokeAuthroleTenantRepoPolicy(context.Context, *AuthroleTenantRepoPolicyRequest) (*RevokeAuthrolePolicyReply, error)
}

func RegisterAuthGrantHTTPServer(s *http.Server, srv AuthGrantHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/auth/{cluster_name}/role/{dest_user}/policies/git", _AuthGrant_GrantAuthroleGitPolicy0_HTTP_Handler(srv))
	r.DELETE("/v1/auth/{cluster_name}/role/{dest_user}/policies/git", _AuthGrant_RevokeAuthroleGitPolicy0_HTTP_Handler(srv))
	r.POST("/v1/auth/{cluster_name}/role/{dest_user}/policies/repo", _AuthGrant_GrantAuthroleRepoPolicy0_HTTP_Handler(srv))
	r.DELETE("/v1/auth/{cluster_name}/role/{dest_user}/policies/repo", _AuthGrant_RevokeAuthroleRepoPolicy0_HTTP_Handler(srv))
	r.POST("/v1/auth/{cluster_name}/role/{dest_user}/policies/cluster", _AuthGrant_GrantAuthroleClusterPolicy0_HTTP_Handler(srv))
	r.DELETE("/v1/auth/{cluster_name}/role/{dest_user}/policies/cluster", _AuthGrant_RevokeAuthroleClusterPolicy0_HTTP_Handler(srv))
	r.POST("/v1/auth/{cluster_name}/role/{dest_user}/policies/tenant/git", _AuthGrant_GrantAuthroleTenantGitPolicy0_HTTP_Handler(srv))
	r.DELETE("/v1/auth/{cluster_name}/role/{dest_user}/policies/tenant/git", _AuthGrant_RevokeAuthroleTenantGitPolicy0_HTTP_Handler(srv))
	r.POST("/v1/auth/{cluster_name}/role/{dest_user}/policies/tenant/repo", _AuthGrant_GrantAuthroleTenantRepoPolicy0_HTTP_Handler(srv))
	r.DELETE("/v1/auth/{cluster_name}/role/{dest_user}/policies/tenant/repo", _AuthGrant_RevokeAuthroleTenantRepoPolicy0_HTTP_Handler(srv))
}

func _AuthGrant_GrantAuthroleGitPolicy0_HTTP_Handler(srv AuthGrantHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthroleGitPolicyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthGrantGrantAuthroleGitPolicy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GrantAuthroleGitPolicy(ctx, req.(*AuthroleGitPolicyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GrantAuthrolePolicyReply)
		return ctx.Result(200, reply)
	}
}

func _AuthGrant_RevokeAuthroleGitPolicy0_HTTP_Handler(srv AuthGrantHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthroleGitPolicyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthGrantRevokeAuthroleGitPolicy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RevokeAuthroleGitPolicy(ctx, req.(*AuthroleGitPolicyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RevokeAuthrolePolicyReply)
		return ctx.Result(200, reply)
	}
}

func _AuthGrant_GrantAuthroleRepoPolicy0_HTTP_Handler(srv AuthGrantHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthroleRepoPolicyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthGrantGrantAuthroleRepoPolicy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GrantAuthroleRepoPolicy(ctx, req.(*AuthroleRepoPolicyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GrantAuthrolePolicyReply)
		return ctx.Result(200, reply)
	}
}

func _AuthGrant_RevokeAuthroleRepoPolicy0_HTTP_Handler(srv AuthGrantHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthroleRepoPolicyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthGrantRevokeAuthroleRepoPolicy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RevokeAuthroleRepoPolicy(ctx, req.(*AuthroleRepoPolicyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RevokeAuthrolePolicyReply)
		return ctx.Result(200, reply)
	}
}

func _AuthGrant_GrantAuthroleClusterPolicy0_HTTP_Handler(srv AuthGrantHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthroleClusterPolicyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthGrantGrantAuthroleClusterPolicy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GrantAuthroleClusterPolicy(ctx, req.(*AuthroleClusterPolicyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GrantAuthrolePolicyReply)
		return ctx.Result(200, reply)
	}
}

func _AuthGrant_RevokeAuthroleClusterPolicy0_HTTP_Handler(srv AuthGrantHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthroleClusterPolicyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthGrantRevokeAuthroleClusterPolicy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RevokeAuthroleClusterPolicy(ctx, req.(*AuthroleClusterPolicyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RevokeAuthrolePolicyReply)
		return ctx.Result(200, reply)
	}
}

func _AuthGrant_GrantAuthroleTenantGitPolicy0_HTTP_Handler(srv AuthGrantHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthroleTenantGitPolicyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthGrantGrantAuthroleTenantGitPolicy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GrantAuthroleTenantGitPolicy(ctx, req.(*AuthroleTenantGitPolicyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GrantAuthrolePolicyReply)
		return ctx.Result(200, reply)
	}
}

func _AuthGrant_RevokeAuthroleTenantGitPolicy0_HTTP_Handler(srv AuthGrantHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthroleTenantGitPolicyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthGrantRevokeAuthroleTenantGitPolicy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RevokeAuthroleTenantGitPolicy(ctx, req.(*AuthroleTenantGitPolicyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RevokeAuthrolePolicyReply)
		return ctx.Result(200, reply)
	}
}

func _AuthGrant_GrantAuthroleTenantRepoPolicy0_HTTP_Handler(srv AuthGrantHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthroleTenantRepoPolicyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthGrantGrantAuthroleTenantRepoPolicy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GrantAuthroleTenantRepoPolicy(ctx, req.(*AuthroleTenantRepoPolicyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GrantAuthrolePolicyReply)
		return ctx.Result(200, reply)
	}
}

func _AuthGrant_RevokeAuthroleTenantRepoPolicy0_HTTP_Handler(srv AuthGrantHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthroleTenantRepoPolicyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthGrantRevokeAuthroleTenantRepoPolicy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RevokeAuthroleTenantRepoPolicy(ctx, req.(*AuthroleTenantRepoPolicyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RevokeAuthrolePolicyReply)
		return ctx.Result(200, reply)
	}
}

type AuthGrantHTTPClient interface {
	GrantAuthroleClusterPolicy(ctx context.Context, req *AuthroleClusterPolicyRequest, opts ...http.CallOption) (rsp *GrantAuthrolePolicyReply, err error)
	GrantAuthroleGitPolicy(ctx context.Context, req *AuthroleGitPolicyRequest, opts ...http.CallOption) (rsp *GrantAuthrolePolicyReply, err error)
	GrantAuthroleRepoPolicy(ctx context.Context, req *AuthroleRepoPolicyRequest, opts ...http.CallOption) (rsp *GrantAuthrolePolicyReply, err error)
	GrantAuthroleTenantGitPolicy(ctx context.Context, req *AuthroleTenantGitPolicyRequest, opts ...http.CallOption) (rsp *GrantAuthrolePolicyReply, err error)
	GrantAuthroleTenantRepoPolicy(ctx context.Context, req *AuthroleTenantRepoPolicyRequest, opts ...http.CallOption) (rsp *GrantAuthrolePolicyReply, err error)
	RevokeAuthroleClusterPolicy(ctx context.Context, req *AuthroleClusterPolicyRequest, opts ...http.CallOption) (rsp *RevokeAuthrolePolicyReply, err error)
	RevokeAuthroleGitPolicy(ctx context.Context, req *AuthroleGitPolicyRequest, opts ...http.CallOption) (rsp *RevokeAuthrolePolicyReply, err error)
	RevokeAuthroleRepoPolicy(ctx context.Context, req *AuthroleRepoPolicyRequest, opts ...http.CallOption) (rsp *RevokeAuthrolePolicyReply, err error)
	RevokeAuthroleTenantGitPolicy(ctx context.Context, req *AuthroleTenantGitPolicyRequest, opts ...http.CallOption) (rsp *RevokeAuthrolePolicyReply, err error)
	RevokeAuthroleTenantRepoPolicy(ctx context.Context, req *AuthroleTenantRepoPolicyRequest, opts ...http.CallOption) (rsp *RevokeAuthrolePolicyReply, err error)
}

type AuthGrantHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthGrantHTTPClient(client *http.Client) AuthGrantHTTPClient {
	return &AuthGrantHTTPClientImpl{client}
}

func (c *AuthGrantHTTPClientImpl) GrantAuthroleClusterPolicy(ctx context.Context, in *AuthroleClusterPolicyRequest, opts ...http.CallOption) (*GrantAuthrolePolicyReply, error) {
	var out GrantAuthrolePolicyReply
	pattern := "/v1/auth/{cluster_name}/role/{dest_user}/policies/cluster"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthGrantGrantAuthroleClusterPolicy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthGrantHTTPClientImpl) GrantAuthroleGitPolicy(ctx context.Context, in *AuthroleGitPolicyRequest, opts ...http.CallOption) (*GrantAuthrolePolicyReply, error) {
	var out GrantAuthrolePolicyReply
	pattern := "/v1/auth/{cluster_name}/role/{dest_user}/policies/git"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthGrantGrantAuthroleGitPolicy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthGrantHTTPClientImpl) GrantAuthroleRepoPolicy(ctx context.Context, in *AuthroleRepoPolicyRequest, opts ...http.CallOption) (*GrantAuthrolePolicyReply, error) {
	var out GrantAuthrolePolicyReply
	pattern := "/v1/auth/{cluster_name}/role/{dest_user}/policies/repo"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthGrantGrantAuthroleRepoPolicy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthGrantHTTPClientImpl) GrantAuthroleTenantGitPolicy(ctx context.Context, in *AuthroleTenantGitPolicyRequest, opts ...http.CallOption) (*GrantAuthrolePolicyReply, error) {
	var out GrantAuthrolePolicyReply
	pattern := "/v1/auth/{cluster_name}/role/{dest_user}/policies/tenant/git"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthGrantGrantAuthroleTenantGitPolicy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthGrantHTTPClientImpl) GrantAuthroleTenantRepoPolicy(ctx context.Context, in *AuthroleTenantRepoPolicyRequest, opts ...http.CallOption) (*GrantAuthrolePolicyReply, error) {
	var out GrantAuthrolePolicyReply
	pattern := "/v1/auth/{cluster_name}/role/{dest_user}/policies/tenant/repo"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthGrantGrantAuthroleTenantRepoPolicy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthGrantHTTPClientImpl) RevokeAuthroleClusterPolicy(ctx context.Context, in *AuthroleClusterPolicyRequest, opts ...http.CallOption) (*RevokeAuthrolePolicyReply, error) {
	var out RevokeAuthrolePolicyReply
	pattern := "/v1/auth/{cluster_name}/role/{dest_user}/policies/cluster"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthGrantRevokeAuthroleClusterPolicy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthGrantHTTPClientImpl) RevokeAuthroleGitPolicy(ctx context.Context, in *AuthroleGitPolicyRequest, opts ...http.CallOption) (*RevokeAuthrolePolicyReply, error) {
	var out RevokeAuthrolePolicyReply
	pattern := "/v1/auth/{cluster_name}/role/{dest_user}/policies/git"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthGrantRevokeAuthroleGitPolicy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthGrantHTTPClientImpl) RevokeAuthroleRepoPolicy(ctx context.Context, in *AuthroleRepoPolicyRequest, opts ...http.CallOption) (*RevokeAuthrolePolicyReply, error) {
	var out RevokeAuthrolePolicyReply
	pattern := "/v1/auth/{cluster_name}/role/{dest_user}/policies/repo"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthGrantRevokeAuthroleRepoPolicy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthGrantHTTPClientImpl) RevokeAuthroleTenantGitPolicy(ctx context.Context, in *AuthroleTenantGitPolicyRequest, opts ...http.CallOption) (*RevokeAuthrolePolicyReply, error) {
	var out RevokeAuthrolePolicyReply
	pattern := "/v1/auth/{cluster_name}/role/{dest_user}/policies/tenant/git"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthGrantRevokeAuthroleTenantGitPolicy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthGrantHTTPClientImpl) RevokeAuthroleTenantRepoPolicy(ctx context.Context, in *AuthroleTenantRepoPolicyRequest, opts ...http.CallOption) (*RevokeAuthrolePolicyReply, error) {
	var out RevokeAuthrolePolicyReply
	pattern := "/v1/auth/{cluster_name}/role/{dest_user}/policies/tenant/repo"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthGrantRevokeAuthroleTenantRepoPolicy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
